
----------------------------------------------------------------------
16:46 2011-1-12

最近还在整理那个openGL的渲染。
现在基本上功能细节没啥问题，主要改原来的代码以适应现在的渲染框架。
现在在这列下 还有哪些事情
1. 窗口， 我是打算把窗口部分放在渲染模块中，
    windows部分基本上移过来，只是exe部分还没有分开。
2. Game模块我也是打算跟exe合在一起的。所以有些功能比如Anim这些我可能会移到渲染这边来
3. 调色板现在还没支持
4. 脚本部分，我是打算封装一起的，这样感觉就自然些，定义一个全局的和一些临时（如oem和读配置的）的。
    这边本来前段时间改的，但是看到lua调用的部分太多，主要怕影响lua与C++交互时的效率。
5. 剩下的就是移植到iphone上

----------------------------------------------------------------------
13:42 2011-1-20
里面说的都是web 引擎，  Unity 我知道他是 一个PC， 手机都兼容的引擎， 据说功能是很强。  Flash这块我也是比较了解的。毕竟我女朋友就是做flash 的web Game。 据我说指，她们公司的做到Flash 2D游戏， 比我以前公司的 2.5D（动画是纯3D，地表是2D） 内存要多耗2倍。CPU就无法比较，毕竟跟不同机器有关。  所以我觉得flash哪怕做了3D的引擎，给我的感觉是功能会很强，flash做过，给我的感觉就是这样，但是性能就很难说。  其实公司这边如果有精力的话，可以考虑在web Game， 挺赚钱的。 技术难度比PC低一些，且现在而言 牛B一点的 游戏不多，竞争没那么大（当然比手机大）。 现在OpenGL 在发布 web版的 openGL。  
      其实市场上有那么PC引擎。出名的不下于10个，但是那又如何，我的看法是一个公司一定有关键核心技术。这样才可以想怎么折腾就怎么折腾。想做优化也可以自己折腾。这样才利用公司的长足发展。
   比如说9游(我有一个朋友在那)就是买别人的引擎，也在做产品，然后在那基础上做游戏。 我真不知道 他现在出了一个什么游戏。 还有国内iphone的开发者，许多都是cocos2d做有游戏（我有一个群iphone开发的群他们是那么说的），甚至根本不用lua做逻辑，然后他们几乎没有几个是赚钱的。游戏品质很差，没有职业的美术。程序也是受限于cocos2d本身的功能和自己的理解。


----------------------------------------------------------------------
10:25 2011-3-14

思路就这样闪过了， 没任何留下。。。。。。。



----------------------------------------------------------------------
9:53 2011-4-2

今天看到360浏览器上网页上存留着 这几天 折腾我很久的两个Bug。
先列列bug吧。。 
1.  arm release  64位 赋值 bug
union UHashValue
{
    DWORD dwValue[2];
    QWORD qwValue;

    inline bool operator ==(const UHashValue& a) const {return qwValue==a.qwValue;}
    inline bool operator > (const UHashValue& a) const {return qwValue>a.qwValue;}
    inline bool operator < (const UHashValue& a) const {return qwValue<a.qwValue;}
    inline void operator = (const QWORD& V){qwValue = V;}
    inline void operator = (const UHashValue& V){qwValue = V.qwValue;} // A 语句
    UHashValue(QWORD V = 0){qwValue = V;}
};

在我打包解包的代码中，有个UHashValue 之间的赋值。 理论上是跑 A 语句。但是这个地方会有问题。
原先A我都没写的，因为默认会自动生成。 后来发现会错，就该了， 最后追踪到汇编 错在这个语句上
采用多寄存器寻址方式，一条指令可以完成多个寄存器值的传送。这种寻址方式可以用一条指令完成传送最多 16 个通用寄存器的值。以下指令： 
LDMIA   R0，{R1，R2，R3，R4}   ；R1←[R0]
                                   ；R2←[R0＋4]
                                  ；R3←[R0＋8]
                                  ；R4←[R0＋12]
该指令的后缀 IA表示在每次执行完加载/存储操作后，R0 按字长度增加，因此，指令可将连续存储单元的值传送到 R1～R4。

而且症状是，就gcc ARM的release，有问题， gcc ARM debug 和 vs2005 x86 都是好的。
所以肯定是 gcc 编译优化的问题或者 ARM 汇编的问题。


2. 就是 因为linux平台上wchar_t 是32位的，可能他是 UTF32的吧，而我只需要UTF16.
所以我定义成这样 typedef std::basic_string<WORD> wstring; 
这个在 ios 3.1.2 关于 对象的析构有问题，应该是他自带的内存池有些问题吧， 问题还没找到。其他都是好的。


所以看到那个网页觉得需要去学习或者加深一些东西。

1. ARM 汇编 指令学习
2. 粒子系统
3. 物理引擎
4. iphone UI 部分开发
5. Andriod NDK开发
6. 3D基本知识 学习
   包括 3D 场景， 3D 模型导入 3D材质， 3D骨骼动画
























